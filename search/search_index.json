{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An Installation And User's Guide For pymata-cpx and FirmataCPx Remotely Monitor And Control An Adafruit Circuit Playground Express Using Python The pymata-cpx library implements a Python 3 compatible API that makes controlling and monitoring an Adafruit Circuit Playground Express simple and fun to do. This package includes the pymata-cpx client library, as well as the FirmataCPx firmware that runs on the Playground express. The pymata-cpx/FirmataCPx combination supports the following Playground Express on-board sensors and actuators: The Buttons and Slide Switch The D13 Board LED. The 10 onboard neo-pixels. Tone generation using the onboard speaker. The accelerometer, including tap sensing. The temperature sensor. The light sensor. The sound sensor. The 7 Touchpad sensors. A full set of examples is included demonstrating all of the sensors and actuators listed above. Last updated 30 December 2019 Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"Welcome"},{"location":"callbacks/","text":"The pymata-cpx API You may view the complete pymata-cpx API by clicking on this link. The API supports both the Circuit Playground Express input sensors and output devices. Let's start by exploring the input sensors. Circuit Playground Express Input Sensors Below is the list of the Circuit Playground Express input devices supported by pymata-cpx: The Accelerometer The Push Buttons And Slide Switch The Touchpad Sensors The Light Sensor The Temperature Sensor The Sound Sensor The Tap Sensor The API Input Device Start And Stop Methods All of these devices have two methods associated with them. One to start continuous reporting for the sensor, and the second to stop continuous reporting. For example, to continuously receive change reports for Button B, call cpx_button_b_start All the start methods require that you provide a callback method. When the sensor changes value, the callback is invoked with information about the change. More about this in a moment. If you no longer wish to receive change notifications, call the stop method for the sensor. Continuing with using Button B as an example, to discontinue Button B from sending value change notifications, call: cpx_button_b_stop Understanding Callbacks When using any of the input device start methods, you must provide a callback method. The callback method is a method that you write to accept sensor change notifications. The format for all input callback methods is the same. If a callback is created with the name my_callback , its signature looks as follows : my_callback(data) The data parameter is provided to the callback method in the form of a list. The length of the list and the data it contains varies depending upon which input device generated the report. You may specify a separate callback for each of the input devices you've enabled, or you can share a callback across multiple sensors. The choice is yours. Understanding The Callback Data For each input device type, the API specifies the list data received by the callback method. The format for the data is as follows: Index 0 is the pin type for the input device. A value of 32 indicates that this is a digital type device, and a value of 2 indicates that this device is an analog device. Knowing the pin type is useful if you wish to have your callback method handle multiple sensors. Index 1 is the internal pin number for the device. See the tables below. Index 2 and above * contain the data value of the sensor. The data is sensor dependent. For each start method, there is a comment in the API that describes the format for the data parameter that will be provided when your callback method is invoked. For example, looking at the API entry for cpx_button_b_start , here is what you would see: def cpx_button_b_start(self, callback) Enable button and report state changes in the callback. :param callback: a list of values described below. Parameters sent to callback: [Digital Pin Type: 32, Pin Number: 5, switch value: 1 if pressed zero if released.] The last line describes the values placed in the data parameter for the callback method. We would expect to see a list that contains: [32, 5, DATA_VALUE], where DATA_VALUE is either a zero or 1. Let's look at an example that returns multiple values. Here is the API entry for receiving notification of changes to a capacitive touch pad: def cpx_cap_touch_start(self, input_pin, callback) Start continuous capacitive touch queries for the specified input pin. Will invoke the provided callback each time a new cap touch result is available. :param input_pin: must be one of the Ax pin numbers. Use only the number. example: cpx_cap_touch_start(5, a_callback_function) :param callback: a list of values described below. Parameters sent to callback: [Analog Pin Type: 2, Pin Number: 1-7, Touched: True or False, Raw data value] For a capacitive touchpad callback, we would expect the data to look like [2, PIN_NUMBER, BOOLEAN_STATE, RAW_DATA_VALUE] Index 0 identifies the event coming from an analog device. Index 1 contains the pin number where the change was detected. Index 2 contains either True or False to indicate the current state of the touch sensor, and Index 3 contains the raw analog value for the sensor if you wish to use that value. All of the start methods in the API identify the items you can expect to find in the callback list. Pin Numbers Here are the pin numbers you would expect to see in the callback data list for each of the sensor types. Digital Inputs Digital Pin Number Device 4 Button A 5 Button B 7 Slide Switch 12 Tap Sensor Analog Inputs Analog Pin Number Sensor 1 - 7 Touchpad 8 Light 9 Temperature 10 Sound 11 Accelerometer The Circuit Playground Express Output Actuators Below is the list of the Circuit Playground Express on-board actuators supported by pymata-cpx: Red \"Board LED\" On-board Neopixels Tone Generator The Examples The best way to understand how to use the API is to see some example code. The following table contains a link to source code for each example and a list of the sensors and actuators that the example uses. With the exception of the buttons_switch_and_pixels example, all of the example code is contained within a class. If you prefer to work in a procedural style, the buttons_switch_and_pixels provides an illustration of the procedural style. Example Sensors Actuators buttons_switch_and_pixels Button A, Button B, Slide Switch Neopixels 1, 3, 6 and 8 light_meter Light Sensor All 10 Neopixels the clapper Sound sensor All 10 Neopixels the tapper Accelorometer tap sensor All 10 Neopixels thermometer Temperature sensor All 10 Neopixels tilted Accelerometer None touch_piano All 7 Touchpads Tone Generator Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"The pymata-cpx API"},{"location":"callbacks/#circuit-playground-express-input-sensors","text":"Below is the list of the Circuit Playground Express input devices supported by pymata-cpx: The Accelerometer The Push Buttons And Slide Switch The Touchpad Sensors The Light Sensor The Temperature Sensor The Sound Sensor The Tap Sensor","title":"Circuit Playground Express Input Sensors"},{"location":"callbacks/#the-api-input-device-start-and-stop-methods","text":"All of these devices have two methods associated with them. One to start continuous reporting for the sensor, and the second to stop continuous reporting. For example, to continuously receive change reports for Button B, call cpx_button_b_start All the start methods require that you provide a callback method. When the sensor changes value, the callback is invoked with information about the change. More about this in a moment. If you no longer wish to receive change notifications, call the stop method for the sensor. Continuing with using Button B as an example, to discontinue Button B from sending value change notifications, call: cpx_button_b_stop","title":"The API Input Device Start And Stop Methods"},{"location":"callbacks/#understanding-callbacks","text":"When using any of the input device start methods, you must provide a callback method. The callback method is a method that you write to accept sensor change notifications. The format for all input callback methods is the same. If a callback is created with the name my_callback , its signature looks as follows : my_callback(data) The data parameter is provided to the callback method in the form of a list. The length of the list and the data it contains varies depending upon which input device generated the report. You may specify a separate callback for each of the input devices you've enabled, or you can share a callback across multiple sensors. The choice is yours.","title":"Understanding Callbacks"},{"location":"callbacks/#understanding-the-callback-data","text":"For each input device type, the API specifies the list data received by the callback method. The format for the data is as follows: Index 0 is the pin type for the input device. A value of 32 indicates that this is a digital type device, and a value of 2 indicates that this device is an analog device. Knowing the pin type is useful if you wish to have your callback method handle multiple sensors. Index 1 is the internal pin number for the device. See the tables below. Index 2 and above * contain the data value of the sensor. The data is sensor dependent. For each start method, there is a comment in the API that describes the format for the data parameter that will be provided when your callback method is invoked. For example, looking at the API entry for cpx_button_b_start , here is what you would see: def cpx_button_b_start(self, callback) Enable button and report state changes in the callback. :param callback: a list of values described below. Parameters sent to callback: [Digital Pin Type: 32, Pin Number: 5, switch value: 1 if pressed zero if released.] The last line describes the values placed in the data parameter for the callback method. We would expect to see a list that contains: [32, 5, DATA_VALUE], where DATA_VALUE is either a zero or 1. Let's look at an example that returns multiple values. Here is the API entry for receiving notification of changes to a capacitive touch pad: def cpx_cap_touch_start(self, input_pin, callback) Start continuous capacitive touch queries for the specified input pin. Will invoke the provided callback each time a new cap touch result is available. :param input_pin: must be one of the Ax pin numbers. Use only the number. example: cpx_cap_touch_start(5, a_callback_function) :param callback: a list of values described below. Parameters sent to callback: [Analog Pin Type: 2, Pin Number: 1-7, Touched: True or False, Raw data value] For a capacitive touchpad callback, we would expect the data to look like [2, PIN_NUMBER, BOOLEAN_STATE, RAW_DATA_VALUE] Index 0 identifies the event coming from an analog device. Index 1 contains the pin number where the change was detected. Index 2 contains either True or False to indicate the current state of the touch sensor, and Index 3 contains the raw analog value for the sensor if you wish to use that value. All of the start methods in the API identify the items you can expect to find in the callback list.","title":"Understanding The Callback Data"},{"location":"callbacks/#pin-numbers","text":"Here are the pin numbers you would expect to see in the callback data list for each of the sensor types.","title":"Pin Numbers"},{"location":"callbacks/#digital-inputs","text":"Digital Pin Number Device 4 Button A 5 Button B 7 Slide Switch 12 Tap Sensor","title":"Digital Inputs"},{"location":"callbacks/#analog-inputs","text":"Analog Pin Number Sensor 1 - 7 Touchpad 8 Light 9 Temperature 10 Sound 11 Accelerometer","title":"Analog Inputs"},{"location":"callbacks/#the-circuit-playground-express-output-actuators","text":"Below is the list of the Circuit Playground Express on-board actuators supported by pymata-cpx: Red \"Board LED\" On-board Neopixels Tone Generator","title":"The Circuit Playground Express Output Actuators"},{"location":"callbacks/#the-examples","text":"The best way to understand how to use the API is to see some example code. The following table contains a link to source code for each example and a list of the sensors and actuators that the example uses. With the exception of the buttons_switch_and_pixels example, all of the example code is contained within a class. If you prefer to work in a procedural style, the buttons_switch_and_pixels provides an illustration of the procedural style. Example Sensors Actuators buttons_switch_and_pixels Button A, Button B, Slide Switch Neopixels 1, 3, 6 and 8 light_meter Light Sensor All 10 Neopixels the clapper Sound sensor All 10 Neopixels the tapper Accelorometer tap sensor All 10 Neopixels thermometer Temperature sensor All 10 Neopixels tilted Accelerometer None touch_piano All 7 Touchpads Tone Generator Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"The Examples"},{"location":"client/","text":"The pymata-cpx Client Library The pymata-cpx library provides an easy to use Python3 API. Using pymata-cpx, you can control and monitor the Playground Express on-board actuators and sensors, remotely from your computer. Working examples are provided in the Usage section of this guide to illustrate using the API. Please note that pymata-cpx is not compatible with the firmware provided by Adafruit. You must use the FirmataCPx firmware in conjunction with this client. FirmataCPx is discussed in the next section of this document. Installation First, Verify That Python 3 Is Installed On Your Computer The library and examples were all tested using Python 3.7. Python 2 may work with pymata-cpx, but it is not supported. If you need to install Python 3 on your computer, please install the latest version of Python 3 using these instructions as a guide. You may also need to install and verify that the pip package loader is available on your computer. Instructions for installing and checking the pip version may be found here. Next, Install pymata-cpx For Windows Open a command window and type: pip install pymata-cpx For Mac And Linux (including Raspberry Pi) Open a command window and type: sudo pip3 install pymata-cpx Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"The pymata-cpx Client Library"},{"location":"client/#installation","text":"","title":"Installation"},{"location":"client/#first-verify-that-python-3-is-installed-on-your-computer","text":"The library and examples were all tested using Python 3.7. Python 2 may work with pymata-cpx, but it is not supported. If you need to install Python 3 on your computer, please install the latest version of Python 3 using these instructions as a guide. You may also need to install and verify that the pip package loader is available on your computer. Instructions for installing and checking the pip version may be found here.","title":"First, Verify That Python 3 Is Installed On Your Computer"},{"location":"client/#next-install-pymata-cpx","text":"","title":"Next, Install pymata-cpx"},{"location":"client/#for-windows","text":"Open a command window and type: pip install pymata-cpx","title":"For Windows"},{"location":"client/#for-mac-and-linux-including-raspberry-pi","text":"Open a command window and type: sudo pip3 install pymata-cpx Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"For Mac And Linux (including Raspberry Pi)"},{"location":"firmware/","text":"The FirmataCPx Firmware To monitor and control the Circuit Playground Express using the pymata-cpx library, a special version of StandardFirmata, called FirmataCPx , must be installed on the Playground Express. FirmataCPx is a modified version of Circuit Playground Firmata that is supplied with the standard Adafruit Circuit Playground Express library. This firmware is called FirmataCPx. FirmataCPx makes several improvements over the original Adafruit sketch, including advanced board discovery, a data transfer rate of 115200, and code simplification and reliability enhancements. Installation Since the Circuit Playground Express utilizes a UF2 bootloader, installation is quick and straightforward. To install FirmataCPx on to the Express, first, click on this link to download FirmataCPx.uf2. Next, place the Circuit Playground Express in bootloader mode by plugging the Express into a USB port on your computer and double-clicking its reset button. All the neo-pixels should light green. Open up a file explorer tool, and you should see a USB drive called CPLAYBOOT. Using the file explorer, drag the FirmataCPx.uf2 file onto the CPLAYBOOT entry. In a few seconds, FirmataCPx should be loaded on the Playground Express. The red LED should flash several times and then extinguish after a successful load. For more information about loading UF2 files onto the Express, please refer to this Adafruit page. Even though this page addresses MakeCode, the procedure for flashing a .uf2 file is the same in all cases. Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"The FirmataCPx Host Firmware"},{"location":"firmware/#installation","text":"Since the Circuit Playground Express utilizes a UF2 bootloader, installation is quick and straightforward. To install FirmataCPx on to the Express, first, click on this link to download FirmataCPx.uf2. Next, place the Circuit Playground Express in bootloader mode by plugging the Express into a USB port on your computer and double-clicking its reset button. All the neo-pixels should light green. Open up a file explorer tool, and you should see a USB drive called CPLAYBOOT. Using the file explorer, drag the FirmataCPx.uf2 file onto the CPLAYBOOT entry. In a few seconds, FirmataCPx should be loaded on the Playground Express. The red LED should flash several times and then extinguish after a successful load. For more information about loading UF2 files onto the Express, please refer to this Adafruit page. Even though this page addresses MakeCode, the procedure for flashing a .uf2 file is the same in all cases. Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"Installation"},{"location":"help/","text":"Reporting Bugs If you find a bug in pymata-cpx, FirmataCPx , or the documentation, please open an issue by clicking on this link. Need Guidance In Using This Software Please send your question to this email address: MisterYsLab@gmail.com Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"Need Help?"},{"location":"help/#reporting-bugs","text":"If you find a bug in pymata-cpx, FirmataCPx , or the documentation, please open an issue by clicking on this link.","title":"Reporting Bugs"},{"location":"help/#need-guidance-in-using-this-software","text":"Please send your question to this email address: MisterYsLab@gmail.com Copyright (C) 2019 Alan Yorinks. All Rights Reserved.","title":"Need Guidance In Using This Software"}]}